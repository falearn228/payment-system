// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wallets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (sender_address, receiver_address, amount) 
VALUES ($1, $2, $3)
`

type CreateTransactionParams struct {
	SenderAddress   string         `json:"sender_address"`
	ReceiverAddress string         `json:"receiver_address"`
	Amount          pgtype.Numeric `json:"amount"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction, arg.SenderAddress, arg.ReceiverAddress, arg.Amount)
	return err
}

const createWallet = `-- name: CreateWallet :exec
INSERT INTO wallets (address, balance)
VALUES ($1, 1000.00)
`

func (q *Queries) CreateWallet(ctx context.Context, address string) error {
	_, err := q.db.Exec(ctx, createWallet, address)
	return err
}

const decrementBalance = `-- name: DecrementBalance :exec
UPDATE wallets 
SET balance = balance - $1,
    updated_at = CURRENT_TIMESTAMP 
WHERE address = $2
`

type DecrementBalanceParams struct {
	Balance pgtype.Numeric `json:"balance"`
	Address string         `json:"address"`
}

func (q *Queries) DecrementBalance(ctx context.Context, arg DecrementBalanceParams) error {
	_, err := q.db.Exec(ctx, decrementBalance, arg.Balance, arg.Address)
	return err
}

const getBalance = `-- name: GetBalance :one
SELECT balance FROM wallets 
WHERE address = $1
`

func (q *Queries) GetBalance(ctx context.Context, address string) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getBalance, address)
	var balance pgtype.Numeric
	err := row.Scan(&balance)
	return balance, err
}

const getWalletCount = `-- name: GetWalletCount :one
SELECT COUNT(*) FROM wallets
`

func (q *Queries) GetWalletCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getWalletCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWalletForUpdate = `-- name: GetWalletForUpdate :one
SELECT balance FROM wallets 
WHERE address = $1 
FOR UPDATE
`

func (q *Queries) GetWalletForUpdate(ctx context.Context, address string) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getWalletForUpdate, address)
	var balance pgtype.Numeric
	err := row.Scan(&balance)
	return balance, err
}

const incrementBalance = `-- name: IncrementBalance :exec
UPDATE wallets 
SET balance = balance + $1,
    updated_at = CURRENT_TIMESTAMP 
WHERE address = $2
`

type IncrementBalanceParams struct {
	Balance pgtype.Numeric `json:"balance"`
	Address string         `json:"address"`
}

func (q *Queries) IncrementBalance(ctx context.Context, arg IncrementBalanceParams) error {
	_, err := q.db.Exec(ctx, incrementBalance, arg.Balance, arg.Address)
	return err
}
